import os
import json
import time
from typing import Dict, Any, Optional
import redis

class RedisClient:

    def __init__(self):
        """Kh·ªüi t·∫°o k·∫øt n·ªëi Redis t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh"""
        redis_host = os.getenv("REDIS_HOST", "localhost")
        redis_port = int(os.getenv("REDIS_PORT", 6379))
        redis_password = os.getenv("REDIS_PASSWORD", None)
        redis_db = int(os.getenv("REDIS_DB", 0))
        
        # Cache TTL (time-to-live) m·∫∑c ƒë·ªãnh = 1 ng√†y (86400 gi√¢y)
        self.cache_ttl = int(os.getenv("REDIS_CACHE_TTL", 86400)) 
        
        # Kh·ªüi t·∫°o k·∫øt n·ªëi t·ªõi Redis
        try:
            self.redis = redis.Redis(
                host=redis_host,
                port=redis_port,
                password=redis_password,
                db=redis_db,
                decode_responses=True,  # T·ª± ƒë·ªông decode bytes -> str
                socket_timeout=5,
                socket_connect_timeout=5
            )
            # Test k·∫øt n·ªëi
            self.redis.ping()
            print(f"ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng t·ªõi Redis t·∫°i {redis_host}:{redis_port}")
        except redis.exceptions.ConnectionError as e:
            print(f" Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi Redis: {str(e)}")
            # T·∫°o ƒë·ªëi t∆∞·ª£ng gi·∫£ l·∫≠p ƒë·ªÉ tr√°nh l·ªói
            self.redis = None
    
    def ping(self) -> bool:
        """Ki·ªÉm tra k·∫øt n·ªëi t·ªõi Redis"""
        if self.redis is None:
            return False
        try:
            return self.redis.ping()
        except:
            return False
    
    def get_cached_analysis(self, url: str) -> Optional[Dict[str, Any]]:

        if not self.ping():
            return None
        
        # T·∫°o key cho Redis d·ª±a tr√™n URL
        cache_key = f"news_analysis:{url}"
        
        try:
            # Ki·ªÉm tra xem c√≥ cache kh√¥ng
            cached_data = self.redis.get(cache_key)
            if not cached_data:
                return None
            
            # Parse d·ªØ li·ªáu JSON t·ª´ cache
            result = json.loads(cached_data)
            print(f" L·∫•y th√†nh c√¥ng k·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ cache cho URL: {url}")
            return result
        except Exception as e:
            print(f" L·ªói khi truy xu·∫•t cache: {str(e)}")
            return None
    
    def cache_article_analysis(self, url: str, analysis_result: Dict[str, Any]) -> bool:

        if not self.ping():
            return False
        
        # T·∫°o key cho Redis d·ª±a tr√™n URL
        cache_key = f"news_analysis:{url}"
        
        try:
            # Th√™m timestamp v√†o k·∫øt qu·∫£
            analysis_result["cached_at"] = int(time.time())
            
            # Convert dict th√†nh JSON string
            json_data = json.dumps(analysis_result)
            
            # L∆∞u v√†o Redis v·ªõi TTL
            self.redis.setex(cache_key, self.cache_ttl, json_data)
            print(f"ƒê√£ l∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch v√†o cache cho URL: {url}")
            return True
        except Exception as e:
            print(f" L·ªói khi l∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch v√†o cache: {str(e)}")
            return False
    
    def clear_cache(self, pattern: str = "news_analysis:*") -> int:

        if not self.ping():
            return 0
        
        try:
            # T√¨m t·∫•t c·∫£ c√°c key theo pattern
            keys = self.redis.keys(pattern)
            
            # Kh√¥ng c√≥ key n√†o ƒë·ªÉ x√≥a
            if not keys:
                return 0
            
            # X√≥a c√°c key
            deleted = self.redis.delete(*keys)
            print(f"üßπ ƒê√£ x√≥a {deleted} key kh·ªèi cache")
            return deleted
        except Exception as e:
            print(f" L·ªói khi x√≥a cache: {str(e)}")
            return 0
    
    def get_cache_stats(self) -> Dict[str, Any]:

        if not self.ping():
            return {"connected": False}
        
        try:
            # ƒê·∫øm s·ªë l∆∞·ª£ng key theo pattern
            news_analysis_keys = len(self.redis.keys("news_analysis:*"))
            
            # L·∫•y th√¥ng tin b·ªô nh·ªõ t·ª´ Redis
            info = self.redis.info("memory")
            
            return {
                "connected": True,
                "total_keys": news_analysis_keys,
                "memory_used_human": info.get("used_memory_human", "N/A"),
                "memory_peak_human": info.get("used_memory_peak_human", "N/A"),
                "cache_ttl_seconds": self.cache_ttl
            }
        except Exception as e:
            print(f" L·ªói khi l·∫•y th·ªëng k√™ cache: {str(e)}")
            return {"connected": True, "error": str(e)}

# T·∫°o singleton instance ƒë·ªÉ s·ª≠ d·ª•ng trong to√†n ·ª©ng d·ª•ng
redis_client = RedisClient() 